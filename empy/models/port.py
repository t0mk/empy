# coding: utf-8

"""
    Metal API

    desc  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, validator
from empy.models.bond_port_data import BondPortData
from empy.models.href import Href
from empy.models.port_data import PortData
from empy.models.virtual_network import VirtualNetwork

class Port(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    bond: Optional[BondPortData] = None
    data: Optional[PortData] = None
    disbond_operation_supported: Optional[StrictBool] = Field(None, description="Indicates whether or not the bond can be broken on the port (when applicable).")
    href: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    type: Optional[StrictStr] = Field(None, description="Type is either \"NetworkBondPort\" for bond ports or \"NetworkPort\" for bondable ethernet ports")
    network_type: Optional[StrictStr] = Field(None, description="Composite network type of the bond")
    native_virtual_network: Optional[VirtualNetwork] = None
    virtual_networks: Optional[List[Href]] = None
    __properties = ["bond", "data", "disbond_operation_supported", "href", "id", "name", "type", "network_type", "native_virtual_network", "virtual_networks"]

    @validator('type')
    def type_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('NetworkPort', 'NetworkBondPort'):
            raise ValueError("must validate the enum values ('NetworkPort', 'NetworkBondPort')")
        return v

    @validator('network_type')
    def network_type_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('layer2-bonded', 'layer2-individual', 'layer3', 'hybrid', 'hybrid-bonded'):
            raise ValueError("must validate the enum values ('layer2-bonded', 'layer2-individual', 'layer3', 'hybrid', 'hybrid-bonded')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Port:
        """Create an instance of Port from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of bond
        if self.bond:
            _dict['bond'] = self.bond.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data
        if self.data:
            _dict['data'] = self.data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of native_virtual_network
        if self.native_virtual_network:
            _dict['native_virtual_network'] = self.native_virtual_network.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in virtual_networks (list)
        _items = []
        if self.virtual_networks:
            for _item in self.virtual_networks:
                if _item:
                    _items.append(_item.to_dict())
            _dict['virtual_networks'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Port:
        """Create an instance of Port from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Port.parse_obj(obj)

        _obj = Port.parse_obj({
            "bond": BondPortData.from_dict(obj.get("bond")) if obj.get("bond") is not None else None,
            "data": PortData.from_dict(obj.get("data")) if obj.get("data") is not None else None,
            "disbond_operation_supported": obj.get("disbond_operation_supported"),
            "href": obj.get("href"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "network_type": obj.get("network_type"),
            "native_virtual_network": VirtualNetwork.from_dict(obj.get("native_virtual_network")) if obj.get("native_virtual_network") is not None else None,
            "virtual_networks": [Href.from_dict(_item) for _item in obj.get("virtual_networks")] if obj.get("virtual_networks") is not None else None
        })
        return _obj

