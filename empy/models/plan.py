# coding: utf-8

"""
    Metal API

    desc  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, validator
from empy.models.plan_available_in_inner import PlanAvailableInInner
from empy.models.plan_available_in_metros_inner import PlanAvailableInMetrosInner
from empy.models.plan_specs import PlanSpecs

class Plan(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    available_in: Optional[List[PlanAvailableInInner]] = Field(None, description="Shows which facilities the plan is available in, and the facility-based price if it is different from the default price.")
    available_in_metros: Optional[List[PlanAvailableInMetrosInner]] = Field(None, description="Shows which metros the plan is available in, and the metro-based price if it is different from the default price.")
    var_class: Optional[StrictStr] = Field(None, alias="class")
    description: Optional[StrictStr] = None
    deployment_types: Optional[List[StrictStr]] = Field(None, unique_items=True)
    id: Optional[StrictStr] = None
    legacy: Optional[StrictBool] = None
    line: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    pricing: Optional[Dict[str, Any]] = None
    slug: Optional[StrictStr] = None
    specs: Optional[PlanSpecs] = None
    type: Optional[StrictStr] = Field(None, description="The plan type")
    href: Optional[StrictStr] = None
    __properties = ["available_in", "available_in_metros", "class", "description", "deployment_types", "id", "legacy", "line", "name", "pricing", "slug", "specs", "type", "href"]

    @validator('deployment_types')
    def deployment_types_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('on_demand', 'spot_market'):
            raise ValueError("must validate the enum values ('on_demand', 'spot_market')")
        return v

    @validator('line')
    def line_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('baremetal'):
            raise ValueError("must validate the enum values ('baremetal')")
        return v

    @validator('type')
    def type_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('standard', 'workload_optimized', 'custom'):
            raise ValueError("must validate the enum values ('standard', 'workload_optimized', 'custom')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Plan:
        """Create an instance of Plan from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in available_in (list)
        _items = []
        if self.available_in:
            for _item in self.available_in:
                if _item:
                    _items.append(_item.to_dict())
            _dict['available_in'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in available_in_metros (list)
        _items = []
        if self.available_in_metros:
            for _item in self.available_in_metros:
                if _item:
                    _items.append(_item.to_dict())
            _dict['available_in_metros'] = _items
        # override the default output from pydantic by calling `to_dict()` of specs
        if self.specs:
            _dict['specs'] = self.specs.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Plan:
        """Create an instance of Plan from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Plan.parse_obj(obj)

        _obj = Plan.parse_obj({
            "available_in": [PlanAvailableInInner.from_dict(_item) for _item in obj.get("available_in")] if obj.get("available_in") is not None else None,
            "available_in_metros": [PlanAvailableInMetrosInner.from_dict(_item) for _item in obj.get("available_in_metros")] if obj.get("available_in_metros") is not None else None,
            "var_class": obj.get("class"),
            "description": obj.get("description"),
            "deployment_types": obj.get("deployment_types"),
            "id": obj.get("id"),
            "legacy": obj.get("legacy"),
            "line": obj.get("line"),
            "name": obj.get("name"),
            "pricing": obj.get("pricing"),
            "slug": obj.get("slug"),
            "specs": PlanSpecs.from_dict(obj.get("specs")) if obj.get("specs") is not None else None,
            "type": obj.get("type"),
            "href": obj.get("href")
        })
        return _obj

