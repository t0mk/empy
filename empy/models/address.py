# coding: utf-8

"""
    Metal API

    desc  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictStr
from empy.models.coordinates import Coordinates

class Address(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    address: StrictStr = ...
    address2: Optional[StrictStr] = None
    city: Optional[StrictStr] = None
    coordinates: Optional[Coordinates] = None
    country: StrictStr = ...
    state: Optional[StrictStr] = None
    zip_code: StrictStr = ...
    href: Optional[StrictStr] = None
    __properties = ["address", "address2", "city", "coordinates", "country", "state", "zip_code", "href"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Address:
        """Create an instance of Address from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of coordinates
        if self.coordinates:
            _dict['coordinates'] = self.coordinates.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Address:
        """Create an instance of Address from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Address.parse_obj(obj)

        _obj = Address.parse_obj({
            "address": obj.get("address"),
            "address2": obj.get("address2"),
            "city": obj.get("city"),
            "coordinates": Coordinates.from_dict(obj.get("coordinates")) if obj.get("coordinates") is not None else None,
            "country": obj.get("country"),
            "state": obj.get("state"),
            "zip_code": obj.get("zip_code"),
            "href": obj.get("href")
        })
        return _obj

