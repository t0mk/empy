# coding: utf-8

"""
    Metal API

    desc  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from empy.models.href import Href
from empy.models.organization import Organization

class Project(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    bgp_config: Optional[Href] = None
    created_at: Optional[datetime] = None
    customdata: Optional[Dict[str, Any]] = None
    devices: Optional[List[Href]] = None
    id: Optional[StrictStr] = None
    invitations: Optional[List[Href]] = None
    max_devices: Optional[Dict[str, Any]] = None
    members: Optional[List[Href]] = None
    memberships: Optional[List[Href]] = None
    name: Optional[StrictStr] = None
    network_status: Optional[Dict[str, Any]] = None
    payment_method: Optional[Href] = None
    ssh_keys: Optional[List[Href]] = None
    updated_at: Optional[datetime] = None
    volumes: Optional[List[Href]] = None
    organization: Optional[Organization] = None
    href: Optional[StrictStr] = None
    __properties = ["bgp_config", "created_at", "customdata", "devices", "id", "invitations", "max_devices", "members", "memberships", "name", "network_status", "payment_method", "ssh_keys", "updated_at", "volumes", "organization", "href"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Project:
        """Create an instance of Project from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of bgp_config
        if self.bgp_config:
            _dict['bgp_config'] = self.bgp_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in devices (list)
        _items = []
        if self.devices:
            for _item in self.devices:
                if _item:
                    _items.append(_item.to_dict())
            _dict['devices'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in invitations (list)
        _items = []
        if self.invitations:
            for _item in self.invitations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['invitations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in members (list)
        _items = []
        if self.members:
            for _item in self.members:
                if _item:
                    _items.append(_item.to_dict())
            _dict['members'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in memberships (list)
        _items = []
        if self.memberships:
            for _item in self.memberships:
                if _item:
                    _items.append(_item.to_dict())
            _dict['memberships'] = _items
        # override the default output from pydantic by calling `to_dict()` of payment_method
        if self.payment_method:
            _dict['payment_method'] = self.payment_method.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in ssh_keys (list)
        _items = []
        if self.ssh_keys:
            for _item in self.ssh_keys:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ssh_keys'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in volumes (list)
        _items = []
        if self.volumes:
            for _item in self.volumes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['volumes'] = _items
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict['organization'] = self.organization.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Project:
        """Create an instance of Project from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Project.parse_obj(obj)

        _obj = Project.parse_obj({
            "bgp_config": Href.from_dict(obj.get("bgp_config")) if obj.get("bgp_config") is not None else None,
            "created_at": obj.get("created_at"),
            "customdata": obj.get("customdata"),
            "devices": [Href.from_dict(_item) for _item in obj.get("devices")] if obj.get("devices") is not None else None,
            "id": obj.get("id"),
            "invitations": [Href.from_dict(_item) for _item in obj.get("invitations")] if obj.get("invitations") is not None else None,
            "max_devices": obj.get("max_devices"),
            "members": [Href.from_dict(_item) for _item in obj.get("members")] if obj.get("members") is not None else None,
            "memberships": [Href.from_dict(_item) for _item in obj.get("memberships")] if obj.get("memberships") is not None else None,
            "name": obj.get("name"),
            "network_status": obj.get("network_status"),
            "payment_method": Href.from_dict(obj.get("payment_method")) if obj.get("payment_method") is not None else None,
            "ssh_keys": [Href.from_dict(_item) for _item in obj.get("ssh_keys")] if obj.get("ssh_keys") is not None else None,
            "updated_at": obj.get("updated_at"),
            "volumes": [Href.from_dict(_item) for _item in obj.get("volumes")] if obj.get("volumes") is not None else None,
            "organization": Organization.from_dict(obj.get("organization")) if obj.get("organization") is not None else None,
            "href": obj.get("href")
        })
        return _obj

