# coding: utf-8

"""
    Metal API

    desc  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from empy.models.href import Href

class Meta(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    first: Optional[Href] = None
    last: Optional[Href] = None
    next: Optional[Href] = None
    previous: Optional[Href] = None
    var_self: Optional[Href] = Field(None, alias="self")
    total: Optional[StrictInt] = None
    href: Optional[StrictStr] = None
    __properties = ["first", "last", "next", "previous", "self", "total", "href"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Meta:
        """Create an instance of Meta from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of first
        if self.first:
            _dict['first'] = self.first.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last
        if self.last:
            _dict['last'] = self.last.to_dict()
        # override the default output from pydantic by calling `to_dict()` of next
        if self.next:
            _dict['next'] = self.next.to_dict()
        # override the default output from pydantic by calling `to_dict()` of previous
        if self.previous:
            _dict['previous'] = self.previous.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_self
        if self.var_self:
            _dict['self'] = self.var_self.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Meta:
        """Create an instance of Meta from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Meta.parse_obj(obj)

        _obj = Meta.parse_obj({
            "first": Href.from_dict(obj.get("first")) if obj.get("first") is not None else None,
            "last": Href.from_dict(obj.get("last")) if obj.get("last") is not None else None,
            "next": Href.from_dict(obj.get("next")) if obj.get("next") is not None else None,
            "previous": Href.from_dict(obj.get("previous")) if obj.get("previous") is not None else None,
            "var_self": Href.from_dict(obj.get("self")) if obj.get("self") is not None else None,
            "total": obj.get("total"),
            "href": obj.get("href")
        })
        return _obj

