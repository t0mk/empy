# coding: utf-8

"""
    Metal API

    desc  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class UserLite(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    avatar_thumb_url: Optional[StrictStr] = Field(None, description="Avatar thumbnail URL of the User")
    created_at: Optional[datetime] = Field(None, description="When the user was created")
    email: Optional[StrictStr] = Field(None, description="Primary email address of the User")
    first_name: Optional[StrictStr] = Field(None, description="First name of the User")
    full_name: Optional[StrictStr] = Field(None, description="Full name of the User")
    href: Optional[StrictStr] = Field(None, description="API URL uniquely representing the User")
    id: StrictStr = Field(..., description="ID of the User")
    last_name: Optional[StrictStr] = Field(None, description="Last name of the User")
    short_id: StrictStr = Field(..., description="Short ID of the User")
    updated_at: Optional[datetime] = Field(None, description="When the user details were last updated")
    __properties = ["avatar_thumb_url", "created_at", "email", "first_name", "full_name", "href", "id", "last_name", "short_id", "updated_at"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserLite:
        """Create an instance of UserLite from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserLite:
        """Create an instance of UserLite from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return UserLite.parse_obj(obj)

        _obj = UserLite.parse_obj({
            "avatar_thumb_url": obj.get("avatar_thumb_url"),
            "created_at": obj.get("created_at"),
            "email": obj.get("email"),
            "first_name": obj.get("first_name"),
            "full_name": obj.get("full_name"),
            "href": obj.get("href"),
            "id": obj.get("id"),
            "last_name": obj.get("last_name"),
            "short_id": obj.get("short_id"),
            "updated_at": obj.get("updated_at")
        })
        return _obj

