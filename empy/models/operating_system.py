# coding: utf-8

"""
    Metal API

    desc  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class OperatingSystem(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    distro: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    licensed: Optional[StrictBool] = Field(None, description="Licenced OS is priced according to pricing property")
    name: Optional[StrictStr] = None
    preinstallable: Optional[StrictBool] = Field(None, description="Servers can be already preinstalled with OS in order to shorten provision time.")
    pricing: Optional[Dict[str, Any]] = Field(None, description="This object contains price per time unit and optional multiplier value if licence price depends on hardware plan or components (e.g. number of cores)")
    provisionable_on: Optional[List[StrictStr]] = None
    slug: Optional[StrictStr] = None
    version: Optional[StrictStr] = None
    href: Optional[StrictStr] = None
    __properties = ["distro", "id", "licensed", "name", "preinstallable", "pricing", "provisionable_on", "slug", "version", "href"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OperatingSystem:
        """Create an instance of OperatingSystem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OperatingSystem:
        """Create an instance of OperatingSystem from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return OperatingSystem.parse_obj(obj)

        _obj = OperatingSystem.parse_obj({
            "distro": obj.get("distro"),
            "id": obj.get("id"),
            "licensed": obj.get("licensed"),
            "name": obj.get("name"),
            "preinstallable": obj.get("preinstallable"),
            "pricing": obj.get("pricing"),
            "provisionable_on": obj.get("provisionable_on"),
            "slug": obj.get("slug"),
            "version": obj.get("version"),
            "href": obj.get("href")
        })
        return _obj

