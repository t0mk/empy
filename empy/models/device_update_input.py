# coding: utf-8

"""
    Metal API

    desc  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class DeviceUpdateInput(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    always_pxe: Optional[StrictBool] = None
    billing_cycle: Optional[StrictStr] = None
    customdata: Optional[Dict[str, Any]] = None
    description: Optional[StrictStr] = None
    hostname: Optional[StrictStr] = None
    ipxe_script_url: Optional[StrictStr] = None
    locked: Optional[StrictBool] = None
    network_frozen: Optional[StrictBool] = Field(None, description="If True, this instance can not be converted to a different network type.")
    spot_instance: Optional[StrictBool] = Field(None, description="Can be set to False to convert a spot-market instance to on-demand.")
    tags: Optional[List[StrictStr]] = None
    userdata: Optional[StrictStr] = None
    href: Optional[StrictStr] = None
    __properties = ["always_pxe", "billing_cycle", "customdata", "description", "hostname", "ipxe_script_url", "locked", "network_frozen", "spot_instance", "tags", "userdata", "href"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DeviceUpdateInput:
        """Create an instance of DeviceUpdateInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DeviceUpdateInput:
        """Create an instance of DeviceUpdateInput from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return DeviceUpdateInput.parse_obj(obj)

        _obj = DeviceUpdateInput.parse_obj({
            "always_pxe": obj.get("always_pxe"),
            "billing_cycle": obj.get("billing_cycle"),
            "customdata": obj.get("customdata"),
            "description": obj.get("description"),
            "hostname": obj.get("hostname"),
            "ipxe_script_url": obj.get("ipxe_script_url"),
            "locked": obj.get("locked"),
            "network_frozen": obj.get("network_frozen"),
            "spot_instance": obj.get("spot_instance"),
            "tags": obj.get("tags"),
            "userdata": obj.get("userdata"),
            "href": obj.get("href")
        })
        return _obj

