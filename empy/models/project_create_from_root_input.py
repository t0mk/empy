# coding: utf-8

"""
    Metal API

    desc  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, StrictStr

class ProjectCreateFromRootInput(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    customdata: Optional[Dict[str, Any]] = None
    name: StrictStr = ...
    organization_id: Optional[StrictStr] = None
    payment_method_id: Optional[StrictStr] = None
    href: Optional[StrictStr] = None
    __properties = ["customdata", "name", "organization_id", "payment_method_id", "href"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProjectCreateFromRootInput:
        """Create an instance of ProjectCreateFromRootInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProjectCreateFromRootInput:
        """Create an instance of ProjectCreateFromRootInput from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ProjectCreateFromRootInput.parse_obj(obj)

        _obj = ProjectCreateFromRootInput.parse_obj({
            "customdata": obj.get("customdata"),
            "name": obj.get("name"),
            "organization_id": obj.get("organization_id"),
            "payment_method_id": obj.get("payment_method_id"),
            "href": obj.get("href")
        })
        return _obj

