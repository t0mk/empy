# coding: utf-8

"""
    Metal API

    desc  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from empy.models.href import Href
from empy.models.ip_assignment_metro import IPAssignmentMetro
from empy.models.parent_block import ParentBlock

class IPAssignment(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    address: Optional[StrictStr] = None
    address_family: Optional[StrictInt] = None
    assigned_to: Optional[Href] = None
    cidr: Optional[StrictInt] = None
    created_at: Optional[datetime] = None
    enabled: Optional[StrictBool] = None
    gateway: Optional[StrictStr] = None
    global_ip: Optional[StrictBool] = None
    href: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    manageable: Optional[StrictBool] = None
    management: Optional[StrictBool] = None
    metro: Optional[IPAssignmentMetro] = None
    netmask: Optional[StrictStr] = None
    network: Optional[StrictStr] = None
    parent_block: Optional[ParentBlock] = None
    public: Optional[StrictBool] = None
    __properties = ["address", "address_family", "assigned_to", "cidr", "created_at", "enabled", "gateway", "global_ip", "href", "id", "manageable", "management", "metro", "netmask", "network", "parent_block", "public"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IPAssignment:
        """Create an instance of IPAssignment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of assigned_to
        if self.assigned_to:
            _dict['assigned_to'] = self.assigned_to.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metro
        if self.metro:
            _dict['metro'] = self.metro.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parent_block
        if self.parent_block:
            _dict['parent_block'] = self.parent_block.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IPAssignment:
        """Create an instance of IPAssignment from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return IPAssignment.parse_obj(obj)

        _obj = IPAssignment.parse_obj({
            "address": obj.get("address"),
            "address_family": obj.get("address_family"),
            "assigned_to": Href.from_dict(obj.get("assigned_to")) if obj.get("assigned_to") is not None else None,
            "cidr": obj.get("cidr"),
            "created_at": obj.get("created_at"),
            "enabled": obj.get("enabled"),
            "gateway": obj.get("gateway"),
            "global_ip": obj.get("global_ip"),
            "href": obj.get("href"),
            "id": obj.get("id"),
            "manageable": obj.get("manageable"),
            "management": obj.get("management"),
            "metro": IPAssignmentMetro.from_dict(obj.get("metro")) if obj.get("metro") is not None else None,
            "netmask": obj.get("netmask"),
            "network": obj.get("network"),
            "parent_block": ParentBlock.from_dict(obj.get("parent_block")) if obj.get("parent_block") is not None else None,
            "public": obj.get("public")
        })
        return _obj

