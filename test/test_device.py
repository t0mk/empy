# coding: utf-8

"""
    Metal API

    desc  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import empy
from empy.models.device import Device  # noqa: E501
from empy.rest import ApiException

class TestDevice(unittest.TestCase):
    """Device unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test Device
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Device`
        """
        model = empy.models.device.Device()  # noqa: E501
        if include_optional :
            return Device(
                always_pxe = True, 
                billing_cycle = '', 
                bonding_mode = 56, 
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                created_by = None, 
                customdata = None, 
                description = '', 
                facility = {"features":["baremetal","backend_transfer","global_ipv4"],"address":{"country":"country","address":"address","address2":"address2","city":"city","coordinates":{"latitude":"latitude","longitude":"longitude"},"state":"state","zip_code":"zip_code"},"code":"code","ip_ranges":["2604:1380::/36","147.75.192.0/21"],"metro":null,"name":"name","id":"046b6c7f-0b8a-43b9-b35d-6489e6daee91"}, 
                hardware_reservation = {"href":"href"}, 
                hostname = '', 
                href = '', 
                id = '', 
                image_url = '', 
                ip_addresses = [
                    {"address":"address","parent_block":{"netmask":"netmask","cidr":5,"href":"href","network":"network"},"created_at":"2000-01-23 04:56:07+00:00","enabled":True,"manageable":True,"network":"network","address_family":6,"public":True,"management":True,"netmask":"netmask","metro":null,"cidr":1,"href":"href","id":"046b6c7f-0b8a-43b9-b35d-6489e6daee91","global_ip":True,"gateway":"gateway","assigned_to":{"href":"href"}}
                    ], 
                ipxe_script_url = '', 
                iqn = '', 
                locked = True, 
                metro = None, 
                network_ports = [
                    {"native_virtual_network":{"vxlan":5,"metal_gateways":[{"gateway_address":"10.1.2.1/27","updated_at":"2000-01-23 04:56:07+00:00","vlan":1001,"created_at":"2000-01-23 04:56:07+00:00","href":"href","id":"046b6c7f-0b8a-43b9-b35d-6489e6daee91","state":"ready"},{"gateway_address":"10.1.2.1/27","updated_at":"2000-01-23 04:56:07+00:00","vlan":1001,"created_at":"2000-01-23 04:56:07+00:00","href":"href","id":"046b6c7f-0b8a-43b9-b35d-6489e6daee91","state":"ready"}],"metro_code":"metro_code","instances":[{"href":"href"},{"href":"href"}],"metro":{"href":"href"},"description":"description","href":"href","id":"046b6c7f-0b8a-43b9-b35d-6489e6daee91","facility":{"href":"href"},"assigned_to_virtual_circuit":True,"assigned_to":{"href":"href"}},"disbond_operation_supported":True,"data":{"bonded":True,"mac":"mac"},"name":"bond0","virtual_networks":[{"href":"href"},{"href":"href"}],"href":"href","id":"046b6c7f-0b8a-43b9-b35d-6489e6daee91","type":"NetworkPort","network_type":"layer2-bonded","bond":{"name":"name","id":"046b6c7f-0b8a-43b9-b35d-6489e6daee91"}}
                    ], 
                operating_system = {"distro":"distro","preinstallable":True,"licensed":True,"name":"name","id":"046b6c7f-0b8a-43b9-b35d-6489e6daee91","provisionable_on":["provisionable_on","provisionable_on"],"version":"version","pricing":"{}","slug":"slug"}, 
                actions = [
                    {"name":"name","type":"type"}
                    ], 
                plan = {"legacy":True,"line":"baremetal","available_in_metros":[{"price":{"hour":1.23},"href":"href"},{"price":{"hour":1.23},"href":"href"}],"description":"description","available_in":[{"price":{"hour":1.23},"href":"href"},{"price":{"hour":1.23},"href":"href"}],"type":"standard","specs":{"features":{"txt":True,"uefi":True,"raid":True},"cpus":[{"count":2,"type":"type"},{"count":2,"type":"type"}],"drives":[{"size":"3.84TB","count":7,"type":"HDD","category":"boot"},{"size":"3.84TB","count":7,"type":"HDD","category":"boot"}],"nics":[{"count":2,"type":"1Gbps"},{"count":2,"type":"1Gbps"}]},"deployment_types":["on_demand","on_demand"],"name":"name","id":"046b6c7f-0b8a-43b9-b35d-6489e6daee91","class":"m3.large.x86","pricing":"{}","slug":"m3.large.x86"}, 
                project = None, 
                project_lite = None, 
                provisioning_events = [
                    {"interpolated":"interpolated","relationships":[{"href":"href"},{"href":"href"}],"created_at":"2000-01-23 04:56:07+00:00","href":"href","id":"046b6c7f-0b8a-43b9-b35d-6489e6daee91","state":"state","body":"body","type":"type"}
                    ], 
                provisioning_percentage = 1.337, 
                root_password = '', 
                short_id = '', 
                spot_instance = True, 
                spot_price_max = 1.337, 
                ssh_keys = [
                    {"href":"href"}
                    ], 
                state = 'active', 
                switch_uuid = '', 
                tags = [
                    ''
                    ], 
                termination_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                user = '', 
                userdata = '', 
                volumes = [
                    {"href":"href"}
                    ]
            )
        else :
            return Device(
        )
        """

    def testDevice(self):
        """Test Device"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
